{
  "address": "0x9F72E1002Da9349A287a4441085E910E23C4389F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pokeMe_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockThreshold_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lickThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "lick",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lickBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lickThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "licks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeMe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x196b7bb469bdf42fca6d70ccbbb05433e0027575e985711ac41e18dcbeddc3ce",
  "receipt": {
    "to": null,
    "from": "0x4B5BaD436CcA8df3bD39A095b84991fAc9A226F1",
    "contractAddress": "0x9F72E1002Da9349A287a4441085E910E23C4389F",
    "transactionIndex": 53,
    "gasUsed": "3405041",
    "logsBloom": "0x
    "blockHash": "0xdd73099396588ff45560c70e577e638b070960eea1a8b50f71723f05bcb7b736",
    "transactionHash": "0x196b7bb469bdf42fca6d70ccbbb05433e0027575e985711ac41e18dcbeddc3ce",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 5709603,
        "transactionHash": "0x196b7bb469bdf42fca6d70ccbbb05433e0027575e985711ac41e18dcbeddc3ce",
        "address": "0x9F72E1002Da9349A287a4441085E910E23C4389F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b5bad436cca8df3bd39a095b84991fac9a226f1"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0xdd73099396588ff45560c70e577e638b070960eea1a8b50f71723f05bcb7b736"
      }
    ],
    "blockNumber": 5709603,
    "cumulativeGasUsed": "6717288",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc1C6805B857Bef1f412519C4A842522431aFed39",
    20,
    10
  ],
  "solcInputHash": "67851c548aca2763a237c5077eb83474",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pokeMe_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockThreshold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lickThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"lick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lickBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lickThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"licks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeMe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoShop.sol\":\"GelatoShop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0xced623ceed8347d38c75e2a1b46f311287a89e008318f92eadfc0e667780a38d\",\"license\":\"MIT\"},\"contracts/GelatoShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {\\n    ERC721,\\n    ERC721Enumerable\\n} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\n\\n// solhint-disable\\ncontract GelatoShop is ERC721Enumerable, Ownable {\\n    address public immutable pokeMe;\\n    uint256 public immutable blockThreshold;\\n    uint256 public immutable lickThreshold;\\n\\n    string private constant base = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 400 400\\\"><defs><style>.cls-1{fill:#fae7ce;}.cls-2{fill:url(#linear-gradient);}.cls-3{fill:url(#linear-gradient-2);}.cls-4{fill:url(#linear-gradient-3);}.cls-5{fill:url(#linear-gradient-4);}.cls-6{opacity:0.3;}.cls-7{fill:#35211c;}.cls-8{fill:url(#radial-gradient);}.cls-9{fill:url(#radial-gradient-2);}.cls-10{fill:url(#radial-gradient-3);}</style><linearGradient id=\\\"linear-gradient\\\" x1=\\\"168.88\\\" y1=\\\"331\\\" x2=\\\"218.89\\\" y2=\\\"331\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0.19\\\" stop-color=\\\"#ffd788\\\"/><stop offset=\\\"0.96\\\" stop-color=\\\"#f7a265\\\"/></linearGradient><linearGradient id=\\\"linear-gradient-2\\\" x1=\\\"155.64\\\" y1=\\\"303.17\\\" x2=\\\"227.67\\\" y2=\\\"303.17\\\" xlink:href=\\\"#linear-gradient\\\"/><linearGradient id=\\\"linear-gradient-3\\\" x1=\\\"144.23\\\" y1=\\\"277.66\\\" x2=\\\"253.66\\\" y2=\\\"277.66\\\" xlink:href=\\\"#linear-gradient\\\"/><linearGradient id=\\\"linear-gradient-4\\\" x1=\\\"182.12\\\" y1=\\\"358.61\\\" x2=\\\"210.1\\\" y2=\\\"358.61\\\" xlink:href=\\\"#linear-gradient\\\"/><radialGradient id=\\\"radial-gradient\\\" cx=\\\"174.15\\\" cy=\\\"192.27\\\" r=\\\"102.96\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0\\\" stop-color=\\\"#ffd9d2\\\"/><stop offset=\\\"0.04\\\" stop-color=\\\"#ffd5cf\\\"/><stop offset=\\\"0.25\\\" stop-color=\\\"#ffc5c4\\\"/><stop offset=\\\"0.41\\\" stop-color=\\\"#ffc0c0\\\"/><stop offset=\\\"0.6\\\" stop-color=\\\"#ffbdbd\\\"/><stop offset=\\\"0.75\\\" stop-color=\\\"#feb2b2\\\"/><stop offset=\\\"0.9\\\" stop-color=\\\"#fda0a0\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#fc9090\\\"/></radialGradient><radialGradient id=\\\"radial-gradient-2\\\" cx=\\\"178.89\\\" cy=\\\"125.64\\\" r=\\\"89.23\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0\\\" stop-color=\\\"#fff\\\"/><stop offset=\\\"0.27\\\" stop-color=\\\"#fffcef\\\"/><stop offset=\\\"0.48\\\" stop-color=\\\"#fffbe9\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#fcf2ca\\\"/></radialGradient><radialGradient id=\\\"radial-gradient-3\\\" cx=\\\"180.64\\\" cy=\\\"60.86\\\" r=\\\"98.15\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop offset=\\\"0\\\" stop-color=\\\"#fff9a9\\\"/><stop offset=\\\"0.47\\\" stop-color=\\\"#ffd899\\\"/><stop offset=\\\"0.71\\\" stop-color=\\\"#f0b662\\\"/><stop offset=\\\"0.9\\\" stop-color=\\\"#e69d3c\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#e2942d\\\"/></radialGradient></defs><rect class=\\\"cls-1\\\" width=\\\"400\\\" height=\\\"400\\\"/><polygon class=\\\"cls-2\\\" points=\\\"218.89 335.2 168.88 309.63 179.12 335.5 212.09 352.37 218.89 335.2\\\"/><polygon class=\\\"cls-3\\\" points=\\\"165.88 302.05 220.87 330.18 227.67 313.01 155.64 276.17 165.88 302.05\\\"/><polygon class=\\\"cls-4\\\" points=\\\"229.66 307.99 253.66 247.34 144.23 247.34 152.64 268.59 229.66 307.99\\\"/><path class=\\\"cls-5\\\" d=\\\"M182.12,343.08l10.62,26.84a6.67,6.67,0,0,0,12.41,0l4.95-12.52Z\\\"/>';\\n    string private constant scoop1 = '<g class=\\\"cls-6\\\"><path class=\\\"cls-7\\\" d=\\\"M265.39,229.55a16.5,16.5,0,0,0-8.75-9.46,12.4,12.4,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.46,16.46,0,0,0-8.77,9.47,16.7,16.7,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a19.13,19.13,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,229.55Z\\\"/></g>';\\n    string private constant scoop2 = '<g class=\\\"cls-6\\\"><path class=\\\"cls-7\\\" d=\\\"M265.39,164.23a16.5,16.5,0,0,0-8.75-9.46,12.4,12.4,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.46,16.46,0,0,0-8.77,9.47,16.7,16.7,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a19.13,19.13,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,164.23Z\\\"/></g>';\\n    string private constant scoop3 = '<g class=\\\"cls-6\\\"><path class=\\\"cls-7\\\" d=\\\"M265.39,164.23a16.5,16.5,0,0,0-8.75-9.46,12.4,12.4,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.46,16.46,0,0,0-8.77,9.47,16.7,16.7,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a19.13,19.13,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,164.23Z\\\"/></g><g class=\\\"cls-6\\\"><path class=\\\"cls-7\\\" d=\\\"M265.39,98.91a16.5,16.5,0,0,0-8.75-9.46,12.4,12.4,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.46,16.46,0,0,0-8.77,9.47,16.7,16.7,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69A50.9,50.9,0,0,0,189.78,132c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a19.13,19.13,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,98.91Z\\\"/></g>';\\n    string private constant shadow1 = '<path class=\\\"cls-8\\\" d=\\\"M265.39,224a16.49,16.49,0,0,0-8.75-9.47,12.39,12.39,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6A16.49,16.49,0,0,0,132.5,224a16.69,16.69,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a16.37,16.37,0,0,0,1.92-1.36A16.8,16.8,0,0,0,265.39,224Z\\\"/>';\\n    string private constant shadow2 = '<path class=\\\"cls-9\\\" d=\\\"M265.39,158.65a16.5,16.5,0,0,0-8.75-9.46,12.39,12.39,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.49,16.49,0,0,0-8.77,9.47,16.69,16.69,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6A23.3,23.3,0,0,0,247.9,194c.3-6.62,4.84-12,10.49-15.47a16.37,16.37,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,158.65Z\\\"/>';\\n    string private constant shadow3 = '<path class=\\\"cls-10\\\" d=\\\"M265.39,93.33a16.5,16.5,0,0,0-8.75-9.46,12.39,12.39,0,0,1-7.09-10.57,50.7,50.7,0,0,0-101.19,0,12.45,12.45,0,0,1-7.09,10.6,16.49,16.49,0,0,0-8.77,9.47,16.69,16.69,0,0,0,21.73,21.25,13.3,13.3,0,0,1,13.18,1.69,50.9,50.9,0,0,0,22.37,10.17c6.31,1.17,11.14,5.85,14,11.6a23.3,23.3,0,0,0,44.13-9.32c.3-6.62,4.84-12,10.49-15.47a16.37,16.37,0,0,0,1.92-1.36A16.81,16.81,0,0,0,265.39,93.33Z\\\"/>';\\n\\n    mapping(uint256 => uint256) public licks;\\n    mapping(uint256 => uint256) public lickBlock;\\n    mapping(address => bool) public isMinter;\\n\\n    modifier onlyPokeMe() {\\n        require(msg.sender == pokeMe, 'only pokeMe');\\n        _;\\n    }\\n\\n    constructor(address pokeMe_, uint256 blockThreshold_, uint256 lickThreshold_) ERC721(\\\"Gelato Shop\\\", \\\"CONE\\\") {\\n        pokeMe = pokeMe_;\\n        blockThreshold = blockThreshold_;\\n        require(lickThreshold_ > 0, 'must be gt 0');\\n        lickThreshold = lickThreshold_;\\n    }\\n\\n    function mint(address user_) external onlyOwner {\\n        require(!isMinter[user_], 'cannot mint twice');\\n        uint256 nextTokenId = totalSupply() + 1;\\n        isMinter[user_] = true;\\n        lickBlock[nextTokenId] = block.number;\\n        _safeMint(user_, nextTokenId);\\n    }\\n\\n    function lick(uint256 tokenId_) external onlyPokeMe {\\n        require(_exists(tokenId_), 'tokenId does not exist');\\n        require(block.number - lickBlock[tokenId_] > blockThreshold, 'brainfreeze, cannot lick');\\n        licks[tokenId_] += 1;\\n        lickBlock[tokenId_] = block.number;\\n    }\\n\\n    function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\\n        uint256 numLicks = licks[tokenId_];\\n        string[3] memory parts;\\n        parts[0] = _getView(numLicks / lickThreshold);\\n        parts[1] = uint2str(numLicks);\\n        parts[2] = '</text></svg>';\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2]));\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Cone #', uint2str(tokenId_), '\\\", \\\"description\\\": \\\"Test Gelato Automation by auto-licking your sweet Gelato NFT\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function _getView(uint256 lickTier_) internal pure returns (string memory) {\\n        string memory s;\\n        if (lickTier_ == 0) {\\n            s = string(abi.encodePacked(base, scoop1, scoop2, scoop3, shadow1, shadow2, shadow3));\\n        } else if (lickTier_ == 1) {\\n            s = string(abi.encodePacked(base, scoop1, scoop2, shadow1, shadow2));\\n        } else if (lickTier_ == 2) {\\n            s = string(abi.encodePacked(base, scoop1, shadow1));\\n        } else {\\n            s = base;\\n        }\\n\\n        return string(abi.encodePacked(s, '<text x=\\\"25\\\" y=\\\"25\\\">LICKS: '));\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x80a9860e9453f95eb09932a67702f4b731a98586bdea43abfe1c7aa3f68c5b48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003e0f38038062003e0f833981016040819052620000349162000216565b604080518082018252600b81526a047656c61746f2053686f760ac1b602080830191825283518085019094526004845263434f4e4560e01b908401528151919291620000839160009162000170565b5080516200009990600190602084019062000170565b505050620000b6620000b06200011a60201b60201c565b6200011e565b6001600160601b0319606084901b1660805260a0829052806200010e5760405162461bcd60e51b815260206004820152600c60248201526b06d75737420626520677420360a41b604482015260640160405180910390fd5b60c05250620002989050565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200017e906200025b565b90600052602060002090601f016020900481019282620001a25760008555620001ed565b82601f10620001bd57805160ff1916838001178555620001ed565b82800160010185558215620001ed579182015b82811115620001ed578251825591602001919060010190620001d0565b50620001fb929150620001ff565b5090565b5b80821115620001fb576000815560010162000200565b6000806000606084860312156200022c57600080fd5b83516001600160a01b03811681146200024457600080fd5b602085015160409095015190969495509392505050565b600181811c908216806200027057607f821691505b602082108114156200029257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160c051613b2f620002e0600039600081816104220152610e5901526000818161033b01526109250152600081816104db015261085c0152613b2f6000f3fe6080604052600436106101a05760003560e01c80636a627842116100ec578063aa271e1a1161008a578063c87b56dd11610064578063c87b56dd146104fd578063d70b95b61461051d578063e985e9c51461054a578063f2fde38b1461059357600080fd5b8063aa271e1a14610479578063b88d4fde146104a9578063c84eee0d146104c957600080fd5b80638da5cb5b116100c65780638da5cb5b146103f25780638f9ceb201461041057806395d89b4114610444578063a22cb4651461045957600080fd5b80636a6278421461039d57806370a08231146103bd578063715018a6146103dd57600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146103095780634c41a6c7146103295780634f6ccce71461035d5780636352211e1461037d57600080fd5b806323b872dd146102a95780632a3220e6146102c95780632f745c59146102e957600080fd5b806301ffc9a7146101ac57806306fdde03146101e1578063081812fc14610203578063095ea7b31461023b57806318160ddd1461025d57806318f5d72f1461027c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004611fbb565b6105b3565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506101f66105de565b6040516101d8919061232c565b34801561020f57600080fd5b5061022361021e366004611ff5565b610670565b6040516001600160a01b0390911681526020016101d8565b34801561024757600080fd5b5061025b610256366004611f91565b61070a565b005b34801561026957600080fd5b506008545b6040519081526020016101d8565b34801561028857600080fd5b5061026e610297366004611ff5565b600b6020526000908152604090205481565b3480156102b557600080fd5b5061025b6102c4366004611e3d565b610820565b3480156102d557600080fd5b5061025b6102e4366004611ff5565b610851565b3480156102f557600080fd5b5061026e610304366004611f91565b6109d3565b34801561031557600080fd5b5061025b610324366004611e3d565b610a69565b34801561033557600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036957600080fd5b5061026e610378366004611ff5565b610a84565b34801561038957600080fd5b50610223610398366004611ff5565b610b17565b3480156103a957600080fd5b5061025b6103b8366004611de8565b610b8e565b3480156103c957600080fd5b5061026e6103d8366004611de8565b610c6e565b3480156103e957600080fd5b5061025b610cf5565b3480156103fe57600080fd5b50600a546001600160a01b0316610223565b34801561041c57600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045057600080fd5b506101f6610d2b565b34801561046557600080fd5b5061025b610474366004611f55565b610d3a565b34801561048557600080fd5b506101cc610494366004611de8565b600d6020526000908152604090205460ff1681565b3480156104b557600080fd5b5061025b6104c4366004611e79565b610dff565b3480156104d557600080fd5b506102237f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506101f6610518366004611ff5565b610e37565b34801561052957600080fd5b5061026e610538366004611ff5565b600c6020526000908152604090205481565b34801561055657600080fd5b506101cc610565366004611e0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561059f57600080fd5b5061025b6105ae366004611de8565b610f4f565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d882610fea565b92915050565b6060600080546105ed906124d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610619906124d8565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610b17565b9050806001600160a01b0316836001600160a01b031614156107835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b336001600160a01b038216148061079f575061079f8133610565565b6108115760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61081b838361103a565b505050565b61082a33826110a8565b6108465760405162461bcd60e51b81526004016106e5906123c6565b61081b83838361119f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108b75760405162461bcd60e51b815260206004820152600b60248201526a6f6e6c7920706f6b654d6560a81b60448201526064016106e5565b6000818152600260205260409020546001600160a01b03166109145760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b925908191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016106e5565b6000818152600c60205260409020547f00000000000000000000000000000000000000000000000000000000000000009061094f9043612495565b1161099c5760405162461bcd60e51b815260206004820152601860248201527f627261696e667265657a652c2063616e6e6f74206c69636b000000000000000060448201526064016106e5565b6000818152600b602052604081208054600192906109bb908490612417565b90915550506000908152600c60205260409020439055565b60006109de83610c6e565b8210610a405760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61081b83838360405180602001604052806000815250610dff565b6000610a8f60085490565b8210610af25760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e5565b60088281548110610b0557610b0561255a565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e5565b600a546001600160a01b03163314610bb85760405162461bcd60e51b81526004016106e590612391565b6001600160a01b0381166000908152600d602052604090205460ff1615610c155760405162461bcd60e51b815260206004820152601160248201527063616e6e6f74206d696e7420747769636560781b60448201526064016106e5565b6000610c2060085490565b610c2b906001612417565b6001600160a01b0383166000908152600d60209081526040808320805460ff19166001179055838352600c90915290204390559050610c6a828261134a565b5050565b60006001600160a01b038216610cd95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610d1f5760405162461bcd60e51b81526004016106e590612391565b610d296000611364565b565b6060600180546105ed906124d8565b6001600160a01b038216331415610d935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e0933836110a8565b610e255760405162461bcd60e51b81526004016106e5906123c6565b610e31848484846113b6565b50505050565b6000818152600b6020526040902054606090610e51611da5565b610e83610e7e7f000000000000000000000000000000000000000000000000000000000000000084612454565b6113e9565b8152610e8e82611640565b6020828101918252604080518082018252600d81526c1e17ba32bc3a1f1e17b9bb339f60991b81840152818501819052845193519151600094610ed594909392910161203a565b60405160208183030381529060405290506000610f22610ef487611640565b610efd84611769565b604051602001610f0e929190612200565b604051602081830303815290604052611769565b905080604051602001610f3591906121bb565b60408051601f198184030181529190529695505050505050565b600a546001600160a01b03163314610f795760405162461bcd60e51b81526004016106e590612391565b6001600160a01b038116610fde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e5565b610fe781611364565b50565b60006001600160e01b031982166380ac58cd60e01b148061101b57506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061106f82610b17565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166111215760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b600061112c83610b17565b9050806001600160a01b0316846001600160a01b031614806111675750836001600160a01b031661115c84610670565b6001600160a01b0316145b8061119757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166111b282610b17565b6001600160a01b03161461121a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106e5565b6001600160a01b03821661127c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b6112878383836118cf565b61129260008261103a565b6001600160a01b03831660009081526003602052604081208054600192906112bb908490612495565b90915550506001600160a01b03821660009081526003602052604081208054600192906112e9908490612417565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610c6a828260405180602001604052806000815250611987565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113c184848461119f565b6113cd848484846119ba565b610e315760405162461bcd60e51b81526004016106e59061233f565b606080826114e15760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101e001604052806101a781526020016130fc6101a7913960405180610380016040528061034b81526020016135c861034b9139604051806101c0016040528061019081526020016134386101909139604051806101c00160405280610195815260200161259d6101959139604051806101c0016040528061019581526020016132a361019591396040516020016114cb97969594939291906120e8565b6040516020818303038152906040529050611618565b826001141561158a5760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101e001604052806101a781526020016130fc6101a79139604051806101c0016040528061019081526020016134386101909139604051806101c00160405280610195815260200161259d61019591396040516020016114cb95949392919061207d565b82600214156115f95760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101c00160405280610190815260200161343861019091396040516020016114cb9392919061203a565b60405180610a0001604052806109ca81526020016127326109ca913990505b80604051602001611629919061217a565b604051602081830303815290604052915050919050565b6060816116645750506040805180820190915260018152600360fc1b602082015290565b8160005b811561168e578061167881612513565b91506116879050600a83612454565b9150611668565b60008167ffffffffffffffff8111156116a9576116a9612570565b6040519080825280601f01601f1916602001820160405280156116d3576020820181803683370190505b509050815b8515611760576116e9600182612495565b905060006116f8600a88612454565b61170390600a612476565b61170d9088612495565b61171890603061242f565b905060008160f81b9050808484815181106117355761173561255a565b60200101906001600160f81b031916908160001a905350611757600a89612454565b975050506116d8565b50949350505050565b805160609080611789575050604080516020810190915260008152919050565b60006003611798836002612417565b6117a29190612454565b6117ad906004612476565b905060006117bc826020612417565b67ffffffffffffffff8111156117d4576117d4612570565b6040519080825280601f01601f1916602001820160405280156117fe576020820181803683370190505b5090506000604051806060016040528060408152602001613913604091399050600181016020830160005b8681101561188a576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611829565b5060038606600181146118a457600281146118b5576118c1565b613d3d60f01b6001198301526118c1565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b03831661192a5761192581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61194d565b816001600160a01b0316836001600160a01b03161461194d5761194d8382611ac7565b6001600160a01b0382166119645761081b81611b64565b826001600160a01b0316826001600160a01b03161461081b5761081b8282611c13565b6119918383611c57565b61199e60008484846119ba565b61081b5760405162461bcd60e51b81526004016106e59061233f565b60006001600160a01b0384163b15611abc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119fe9033908990889088906004016122ef565b602060405180830381600087803b158015611a1857600080fd5b505af1925050508015611a48575060408051601f3d908101601f19168201909252611a4591810190611fd8565b60015b611aa2573d808015611a76576040519150601f19603f3d011682016040523d82523d6000602084013e611a7b565b606091505b508051611a9a5760405162461bcd60e51b81526004016106e59061233f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611197565b506001949350505050565b60006001611ad484610c6e565b611ade9190612495565b600083815260076020526040902054909150808214611b31576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611b7690600190612495565b60008381526009602052604081205460088054939450909284908110611b9e57611b9e61255a565b906000526020600020015490508060088381548110611bbf57611bbf61255a565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611bf757611bf7612544565b6001900381819060005260206000200160009055905550505050565b6000611c1e83610c6e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611cad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b031615611d125760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b611d1e600083836118cf565b6001600160a01b0382166000908152600360205260408120805460019290611d47908490612417565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60405180606001604052806003905b6060815260200190600190039081611db45790505090565b80356001600160a01b0381168114611de357600080fd5b919050565b600060208284031215611dfa57600080fd5b611e0382611dcc565b9392505050565b60008060408385031215611e1d57600080fd5b611e2683611dcc565b9150611e3460208401611dcc565b90509250929050565b600080600060608486031215611e5257600080fd5b611e5b84611dcc565b9250611e6960208501611dcc565b9150604084013590509250925092565b60008060008060808587031215611e8f57600080fd5b611e9885611dcc565b9350611ea660208601611dcc565b925060408501359150606085013567ffffffffffffffff80821115611eca57600080fd5b818701915087601f830112611ede57600080fd5b813581811115611ef057611ef0612570565b604051601f8201601f19908116603f01168101908382118183101715611f1857611f18612570565b816040528281528a6020848701011115611f3157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611f6857600080fd5b611f7183611dcc565b915060208301358015158114611f8657600080fd5b809150509250929050565b60008060408385031215611fa457600080fd5b611fad83611dcc565b946020939093013593505050565b600060208284031215611fcd57600080fd5b8135611e0381612586565b600060208284031215611fea57600080fd5b8151611e0381612586565b60006020828403121561200757600080fd5b5035919050565b600081518084526120268160208601602086016124ac565b601f01601f19169290920160200192915050565b6000845161204c8184602089016124ac565b8451908301906120608183602089016124ac565b84519101906120738183602088016124ac565b0195945050505050565b6000865161208f818460208b016124ac565b8651908301906120a3818360208b016124ac565b86519101906120b6818360208a016124ac565b85519101906120c98183602089016124ac565b84519101906120dc8183602088016124ac565b01979650505050505050565b6000885160206120fb8285838e016124ac565b89519184019161210e8184848e016124ac565b89519201916121208184848d016124ac565b88519201916121328184848c016124ac565b87519201916121448184848b016124ac565b86519201916121568184848a016124ac565b855192019161216881848489016124ac565b919091019a9950505050505050505050565b6000825161218c8184602087016124ac565b7f3c7465787420783d2232352220793d223235223e4c49434b533a200000000000920191825250601b01919050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516121f381601d8501602087016124ac565b91909101601d0192915050565b6f7b226e616d65223a2022436f6e65202360801b8152825160009061222c8160108501602088016124ac565b7f222c20226465736372697074696f6e223a2022546573742047656c61746f20416010918401918201527f75746f6d6174696f6e206279206175746f2d6c69636b696e6720796f7572207360308201527f776565742047656c61746f204e4654222c2022696d616765223a2022646174616050820152750e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60521b607082015283516122d48160868401602088016124ac565b61227d60f01b60869290910191820152608801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906123229083018461200e565b9695505050505050565b602081526000611e03602083018461200e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561242a5761242a61252e565b500190565b600060ff821660ff84168060ff0382111561244c5761244c61252e565b019392505050565b60008261247157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156124905761249061252e565b500290565b6000828210156124a7576124a761252e565b500390565b60005b838110156124c75781810151838201526020016124af565b83811115610e315750506000910152565b600181811c908216806124ec57607f821691505b6020821081141561250d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125275761252761252e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610fe757600080fdfe3c7061746820636c6173733d22636c732d392220643d224d3236352e33392c3135382e36356131362e352c31362e352c302c302c302d382e37352d392e34362c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34392c31362e34392c302c302c302d382e37372c392e34372c31362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e364132332e332c32332e332c302c302c302c3234372e392c313934632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3135382e36355a222f3e3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302034303020343030223e3c646566733e3c7374796c653e2e636c732d317b66696c6c3a236661653763653b7d2e636c732d327b66696c6c3a75726c28236c696e6561722d6772616469656e74293b7d2e636c732d337b66696c6c3a75726c28236c696e6561722d6772616469656e742d32293b7d2e636c732d347b66696c6c3a75726c28236c696e6561722d6772616469656e742d33293b7d2e636c732d357b66696c6c3a75726c28236c696e6561722d6772616469656e742d34293b7d2e636c732d367b6f7061636974793a302e333b7d2e636c732d377b66696c6c3a233335323131633b7d2e636c732d387b66696c6c3a75726c282372616469616c2d6772616469656e74293b7d2e636c732d397b66696c6c3a75726c282372616469616c2d6772616469656e742d32293b7d2e636c732d31307b66696c6c3a75726c282372616469616c2d6772616469656e742d33293b7d3c2f7374796c653e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e74222078313d223136382e3838222079313d22333331222078323d223231382e3839222079323d2233333122206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d22302e3139222073746f702d636f6c6f723d2223666664373838222f3e3c73746f70206f66667365743d22302e3936222073746f702d636f6c6f723d2223663761323635222f3e3c2f6c696e6561724772616469656e743e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d32222078313d223135352e3634222079313d223330332e3137222078323d223232372e3637222079323d223330332e31372220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d33222078313d223134342e3233222079313d223237372e3636222078323d223235332e3636222079323d223237372e36362220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d34222078313d223138322e3132222079313d223335382e3631222078323d223231302e31222079323d223335382e36312220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e74222063783d223137342e3135222063793d223139322e32372220723d223130322e393622206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666664396432222f3e3c73746f70206f66667365743d22302e3034222073746f702d636f6c6f723d2223666664356366222f3e3c73746f70206f66667365743d22302e3235222073746f702d636f6c6f723d2223666663356334222f3e3c73746f70206f66667365743d22302e3431222073746f702d636f6c6f723d2223666663306330222f3e3c73746f70206f66667365743d22302e36222073746f702d636f6c6f723d2223666662646264222f3e3c73746f70206f66667365743d22302e3735222073746f702d636f6c6f723d2223666562326232222f3e3c73746f70206f66667365743d22302e39222073746f702d636f6c6f723d2223666461306130222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223666339303930222f3e3c2f72616469616c4772616469656e743e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e742d32222063783d223137382e3839222063793d223132352e36342220723d2238392e323322206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666666222f3e3c73746f70206f66667365743d22302e3237222073746f702d636f6c6f723d2223666666636566222f3e3c73746f70206f66667365743d22302e3438222073746f702d636f6c6f723d2223666666626539222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223666366326361222f3e3c2f72616469616c4772616469656e743e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e742d33222063783d223138302e3634222063793d2236302e38362220723d2239382e313522206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666666396139222f3e3c73746f70206f66667365743d22302e3437222073746f702d636f6c6f723d2223666664383939222f3e3c73746f70206f66667365743d22302e3731222073746f702d636f6c6f723d2223663062363632222f3e3c73746f70206f66667365743d22302e39222073746f702d636f6c6f723d2223653639643363222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223653239343264222f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c7265637420636c6173733d22636c732d31222077696474683d2234303022206865696768743d22343030222f3e3c706f6c79676f6e20636c6173733d22636c732d322220706f696e74733d223231382e3839203333352e32203136382e3838203330392e3633203137392e3132203333352e35203231322e3039203335322e3337203231382e3839203333352e32222f3e3c706f6c79676f6e20636c6173733d22636c732d332220706f696e74733d223136352e3838203330322e3035203232302e3837203333302e3138203232372e3637203331332e3031203135352e3634203237362e3137203136352e3838203330322e3035222f3e3c706f6c79676f6e20636c6173733d22636c732d342220706f696e74733d223232392e3636203330372e3939203235332e3636203234372e3334203134342e3233203234372e3334203135322e3634203236382e3539203232392e3636203330372e3939222f3e3c7061746820636c6173733d22636c732d352220643d224d3138322e31322c3334332e30386c31302e36322c32362e383461362e36372c362e36372c302c302c302c31322e34312c306c342e39352d31322e35325a222f3e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3136342e32336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3136342e32335a222f3e3c2f673e3c7061746820636c6173733d22636c732d31302220643d224d3236352e33392c39332e33336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34392c31362e34392c302c302c302d382e37372c392e34372c31362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c39332e33335a222f3e3c7061746820636c6173733d22636c732d382220643d224d3236352e33392c3232346131362e34392c31362e34392c302c302c302d382e37352d392e34372c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e364131362e34392c31362e34392c302c302c302c3133322e352c3232346131362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e382c31362e382c302c302c302c3236352e33392c3232345a222f3e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3136342e32336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3136342e32335a222f3e3c2f673e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c39382e39316131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36394135302e392c35302e392c302c302c302c3138392e37382c31333263362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c39382e39315a222f3e3c2f673e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3232392e35356131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3232392e35355a222f3e3c2f673ea26469706673582212208db7a2a05d346a10f28cec3f15263d58ad0c4f470da138c064e023a3baa71dc564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80636a627842116100ec578063aa271e1a1161008a578063c87b56dd11610064578063c87b56dd146104fd578063d70b95b61461051d578063e985e9c51461054a578063f2fde38b1461059357600080fd5b8063aa271e1a14610479578063b88d4fde146104a9578063c84eee0d146104c957600080fd5b80638da5cb5b116100c65780638da5cb5b146103f25780638f9ceb201461041057806395d89b4114610444578063a22cb4651461045957600080fd5b80636a6278421461039d57806370a08231146103bd578063715018a6146103dd57600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146103095780634c41a6c7146103295780634f6ccce71461035d5780636352211e1461037d57600080fd5b806323b872dd146102a95780632a3220e6146102c95780632f745c59146102e957600080fd5b806301ffc9a7146101ac57806306fdde03146101e1578063081812fc14610203578063095ea7b31461023b57806318160ddd1461025d57806318f5d72f1461027c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004611fbb565b6105b3565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506101f66105de565b6040516101d8919061232c565b34801561020f57600080fd5b5061022361021e366004611ff5565b610670565b6040516001600160a01b0390911681526020016101d8565b34801561024757600080fd5b5061025b610256366004611f91565b61070a565b005b34801561026957600080fd5b506008545b6040519081526020016101d8565b34801561028857600080fd5b5061026e610297366004611ff5565b600b6020526000908152604090205481565b3480156102b557600080fd5b5061025b6102c4366004611e3d565b610820565b3480156102d557600080fd5b5061025b6102e4366004611ff5565b610851565b3480156102f557600080fd5b5061026e610304366004611f91565b6109d3565b34801561031557600080fd5b5061025b610324366004611e3d565b610a69565b34801561033557600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036957600080fd5b5061026e610378366004611ff5565b610a84565b34801561038957600080fd5b50610223610398366004611ff5565b610b17565b3480156103a957600080fd5b5061025b6103b8366004611de8565b610b8e565b3480156103c957600080fd5b5061026e6103d8366004611de8565b610c6e565b3480156103e957600080fd5b5061025b610cf5565b3480156103fe57600080fd5b50600a546001600160a01b0316610223565b34801561041c57600080fd5b5061026e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561045057600080fd5b506101f6610d2b565b34801561046557600080fd5b5061025b610474366004611f55565b610d3a565b34801561048557600080fd5b506101cc610494366004611de8565b600d6020526000908152604090205460ff1681565b3480156104b557600080fd5b5061025b6104c4366004611e79565b610dff565b3480156104d557600080fd5b506102237f000000000000000000000000000000000000000000000000000000000000000081565b34801561050957600080fd5b506101f6610518366004611ff5565b610e37565b34801561052957600080fd5b5061026e610538366004611ff5565b600c6020526000908152604090205481565b34801561055657600080fd5b506101cc610565366004611e0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561059f57600080fd5b5061025b6105ae366004611de8565b610f4f565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d882610fea565b92915050565b6060600080546105ed906124d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610619906124d8565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610b17565b9050806001600160a01b0316836001600160a01b031614156107835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b336001600160a01b038216148061079f575061079f8133610565565b6108115760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61081b838361103a565b505050565b61082a33826110a8565b6108465760405162461bcd60e51b81526004016106e5906123c6565b61081b83838361119f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108b75760405162461bcd60e51b815260206004820152600b60248201526a6f6e6c7920706f6b654d6560a81b60448201526064016106e5565b6000818152600260205260409020546001600160a01b03166109145760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b925908191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016106e5565b6000818152600c60205260409020547f00000000000000000000000000000000000000000000000000000000000000009061094f9043612495565b1161099c5760405162461bcd60e51b815260206004820152601860248201527f627261696e667265657a652c2063616e6e6f74206c69636b000000000000000060448201526064016106e5565b6000818152600b602052604081208054600192906109bb908490612417565b90915550506000908152600c60205260409020439055565b60006109de83610c6e565b8210610a405760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61081b83838360405180602001604052806000815250610dff565b6000610a8f60085490565b8210610af25760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e5565b60088281548110610b0557610b0561255a565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e5565b600a546001600160a01b03163314610bb85760405162461bcd60e51b81526004016106e590612391565b6001600160a01b0381166000908152600d602052604090205460ff1615610c155760405162461bcd60e51b815260206004820152601160248201527063616e6e6f74206d696e7420747769636560781b60448201526064016106e5565b6000610c2060085490565b610c2b906001612417565b6001600160a01b0383166000908152600d60209081526040808320805460ff19166001179055838352600c90915290204390559050610c6a828261134a565b5050565b60006001600160a01b038216610cd95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610d1f5760405162461bcd60e51b81526004016106e590612391565b610d296000611364565b565b6060600180546105ed906124d8565b6001600160a01b038216331415610d935760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610e0933836110a8565b610e255760405162461bcd60e51b81526004016106e5906123c6565b610e31848484846113b6565b50505050565b6000818152600b6020526040902054606090610e51611da5565b610e83610e7e7f000000000000000000000000000000000000000000000000000000000000000084612454565b6113e9565b8152610e8e82611640565b6020828101918252604080518082018252600d81526c1e17ba32bc3a1f1e17b9bb339f60991b81840152818501819052845193519151600094610ed594909392910161203a565b60405160208183030381529060405290506000610f22610ef487611640565b610efd84611769565b604051602001610f0e929190612200565b604051602081830303815290604052611769565b905080604051602001610f3591906121bb565b60408051601f198184030181529190529695505050505050565b600a546001600160a01b03163314610f795760405162461bcd60e51b81526004016106e590612391565b6001600160a01b038116610fde5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e5565b610fe781611364565b50565b60006001600160e01b031982166380ac58cd60e01b148061101b57506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061106f82610b17565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166111215760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b600061112c83610b17565b9050806001600160a01b0316846001600160a01b031614806111675750836001600160a01b031661115c84610670565b6001600160a01b0316145b8061119757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166111b282610b17565b6001600160a01b03161461121a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106e5565b6001600160a01b03821661127c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b6112878383836118cf565b61129260008261103a565b6001600160a01b03831660009081526003602052604081208054600192906112bb908490612495565b90915550506001600160a01b03821660009081526003602052604081208054600192906112e9908490612417565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610c6a828260405180602001604052806000815250611987565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6113c184848461119f565b6113cd848484846119ba565b610e315760405162461bcd60e51b81526004016106e59061233f565b606080826114e15760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101e001604052806101a781526020016130fc6101a7913960405180610380016040528061034b81526020016135c861034b9139604051806101c0016040528061019081526020016134386101909139604051806101c00160405280610195815260200161259d6101959139604051806101c0016040528061019581526020016132a361019591396040516020016114cb97969594939291906120e8565b6040516020818303038152906040529050611618565b826001141561158a5760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101e001604052806101a781526020016130fc6101a79139604051806101c0016040528061019081526020016134386101909139604051806101c00160405280610195815260200161259d61019591396040516020016114cb95949392919061207d565b82600214156115f95760405180610a0001604052806109ca81526020016127326109ca9139604051806101e001604052806101a781526020016139536101a79139604051806101c00160405280610190815260200161343861019091396040516020016114cb9392919061203a565b60405180610a0001604052806109ca81526020016127326109ca913990505b80604051602001611629919061217a565b604051602081830303815290604052915050919050565b6060816116645750506040805180820190915260018152600360fc1b602082015290565b8160005b811561168e578061167881612513565b91506116879050600a83612454565b9150611668565b60008167ffffffffffffffff8111156116a9576116a9612570565b6040519080825280601f01601f1916602001820160405280156116d3576020820181803683370190505b509050815b8515611760576116e9600182612495565b905060006116f8600a88612454565b61170390600a612476565b61170d9088612495565b61171890603061242f565b905060008160f81b9050808484815181106117355761173561255a565b60200101906001600160f81b031916908160001a905350611757600a89612454565b975050506116d8565b50949350505050565b805160609080611789575050604080516020810190915260008152919050565b60006003611798836002612417565b6117a29190612454565b6117ad906004612476565b905060006117bc826020612417565b67ffffffffffffffff8111156117d4576117d4612570565b6040519080825280601f01601f1916602001820160405280156117fe576020820181803683370190505b5090506000604051806060016040528060408152602001613913604091399050600181016020830160005b8681101561188a576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b835260049092019101611829565b5060038606600181146118a457600281146118b5576118c1565b613d3d60f01b6001198301526118c1565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b03831661192a5761192581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61194d565b816001600160a01b0316836001600160a01b03161461194d5761194d8382611ac7565b6001600160a01b0382166119645761081b81611b64565b826001600160a01b0316826001600160a01b03161461081b5761081b8282611c13565b6119918383611c57565b61199e60008484846119ba565b61081b5760405162461bcd60e51b81526004016106e59061233f565b60006001600160a01b0384163b15611abc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119fe9033908990889088906004016122ef565b602060405180830381600087803b158015611a1857600080fd5b505af1925050508015611a48575060408051601f3d908101601f19168201909252611a4591810190611fd8565b60015b611aa2573d808015611a76576040519150601f19603f3d011682016040523d82523d6000602084013e611a7b565b606091505b508051611a9a5760405162461bcd60e51b81526004016106e59061233f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611197565b506001949350505050565b60006001611ad484610c6e565b611ade9190612495565b600083815260076020526040902054909150808214611b31576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611b7690600190612495565b60008381526009602052604081205460088054939450909284908110611b9e57611b9e61255a565b906000526020600020015490508060088381548110611bbf57611bbf61255a565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611bf757611bf7612544565b6001900381819060005260206000200160009055905550505050565b6000611c1e83610c6e565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611cad5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b031615611d125760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b611d1e600083836118cf565b6001600160a01b0382166000908152600360205260408120805460019290611d47908490612417565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60405180606001604052806003905b6060815260200190600190039081611db45790505090565b80356001600160a01b0381168114611de357600080fd5b919050565b600060208284031215611dfa57600080fd5b611e0382611dcc565b9392505050565b60008060408385031215611e1d57600080fd5b611e2683611dcc565b9150611e3460208401611dcc565b90509250929050565b600080600060608486031215611e5257600080fd5b611e5b84611dcc565b9250611e6960208501611dcc565b9150604084013590509250925092565b60008060008060808587031215611e8f57600080fd5b611e9885611dcc565b9350611ea660208601611dcc565b925060408501359150606085013567ffffffffffffffff80821115611eca57600080fd5b818701915087601f830112611ede57600080fd5b813581811115611ef057611ef0612570565b604051601f8201601f19908116603f01168101908382118183101715611f1857611f18612570565b816040528281528a6020848701011115611f3157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611f6857600080fd5b611f7183611dcc565b915060208301358015158114611f8657600080fd5b809150509250929050565b60008060408385031215611fa457600080fd5b611fad83611dcc565b946020939093013593505050565b600060208284031215611fcd57600080fd5b8135611e0381612586565b600060208284031215611fea57600080fd5b8151611e0381612586565b60006020828403121561200757600080fd5b5035919050565b600081518084526120268160208601602086016124ac565b601f01601f19169290920160200192915050565b6000845161204c8184602089016124ac565b8451908301906120608183602089016124ac565b84519101906120738183602088016124ac565b0195945050505050565b6000865161208f818460208b016124ac565b8651908301906120a3818360208b016124ac565b86519101906120b6818360208a016124ac565b85519101906120c98183602089016124ac565b84519101906120dc8183602088016124ac565b01979650505050505050565b6000885160206120fb8285838e016124ac565b89519184019161210e8184848e016124ac565b89519201916121208184848d016124ac565b88519201916121328184848c016124ac565b87519201916121448184848b016124ac565b86519201916121568184848a016124ac565b855192019161216881848489016124ac565b919091019a9950505050505050505050565b6000825161218c8184602087016124ac565b7f3c7465787420783d2232352220793d223235223e4c49434b533a200000000000920191825250601b01919050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516121f381601d8501602087016124ac565b91909101601d0192915050565b6f7b226e616d65223a2022436f6e65202360801b8152825160009061222c8160108501602088016124ac565b7f222c20226465736372697074696f6e223a2022546573742047656c61746f20416010918401918201527f75746f6d6174696f6e206279206175746f2d6c69636b696e6720796f7572207360308201527f776565742047656c61746f204e4654222c2022696d616765223a2022646174616050820152750e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60521b607082015283516122d48160868401602088016124ac565b61227d60f01b60869290910191820152608801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906123229083018461200e565b9695505050505050565b602081526000611e03602083018461200e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561242a5761242a61252e565b500190565b600060ff821660ff84168060ff0382111561244c5761244c61252e565b019392505050565b60008261247157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156124905761249061252e565b500290565b6000828210156124a7576124a761252e565b500390565b60005b838110156124c75781810151838201526020016124af565b83811115610e315750506000910152565b600181811c908216806124ec57607f821691505b6020821081141561250d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156125275761252761252e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610fe757600080fdfe3c7061746820636c6173733d22636c732d392220643d224d3236352e33392c3135382e36356131362e352c31362e352c302c302c302d382e37352d392e34362c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34392c31362e34392c302c302c302d382e37372c392e34372c31362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e364132332e332c32332e332c302c302c302c3234372e392c313934632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3135382e36355a222f3e3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b222076696577426f783d223020302034303020343030223e3c646566733e3c7374796c653e2e636c732d317b66696c6c3a236661653763653b7d2e636c732d327b66696c6c3a75726c28236c696e6561722d6772616469656e74293b7d2e636c732d337b66696c6c3a75726c28236c696e6561722d6772616469656e742d32293b7d2e636c732d347b66696c6c3a75726c28236c696e6561722d6772616469656e742d33293b7d2e636c732d357b66696c6c3a75726c28236c696e6561722d6772616469656e742d34293b7d2e636c732d367b6f7061636974793a302e333b7d2e636c732d377b66696c6c3a233335323131633b7d2e636c732d387b66696c6c3a75726c282372616469616c2d6772616469656e74293b7d2e636c732d397b66696c6c3a75726c282372616469616c2d6772616469656e742d32293b7d2e636c732d31307b66696c6c3a75726c282372616469616c2d6772616469656e742d33293b7d3c2f7374796c653e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e74222078313d223136382e3838222079313d22333331222078323d223231382e3839222079323d2233333122206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d22302e3139222073746f702d636f6c6f723d2223666664373838222f3e3c73746f70206f66667365743d22302e3936222073746f702d636f6c6f723d2223663761323635222f3e3c2f6c696e6561724772616469656e743e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d32222078313d223135352e3634222079313d223330332e3137222078323d223232372e3637222079323d223330332e31372220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d33222078313d223134342e3233222079313d223237372e3636222078323d223235332e3636222079323d223237372e36362220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c6c696e6561724772616469656e742069643d226c696e6561722d6772616469656e742d34222078313d223138322e3132222079313d223335382e3631222078323d223231302e31222079323d223335382e36312220786c696e6b3a687265663d22236c696e6561722d6772616469656e74222f3e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e74222063783d223137342e3135222063793d223139322e32372220723d223130322e393622206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666664396432222f3e3c73746f70206f66667365743d22302e3034222073746f702d636f6c6f723d2223666664356366222f3e3c73746f70206f66667365743d22302e3235222073746f702d636f6c6f723d2223666663356334222f3e3c73746f70206f66667365743d22302e3431222073746f702d636f6c6f723d2223666663306330222f3e3c73746f70206f66667365743d22302e36222073746f702d636f6c6f723d2223666662646264222f3e3c73746f70206f66667365743d22302e3735222073746f702d636f6c6f723d2223666562326232222f3e3c73746f70206f66667365743d22302e39222073746f702d636f6c6f723d2223666461306130222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223666339303930222f3e3c2f72616469616c4772616469656e743e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e742d32222063783d223137382e3839222063793d223132352e36342220723d2238392e323322206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666666222f3e3c73746f70206f66667365743d22302e3237222073746f702d636f6c6f723d2223666666636566222f3e3c73746f70206f66667365743d22302e3438222073746f702d636f6c6f723d2223666666626539222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223666366326361222f3e3c2f72616469616c4772616469656e743e3c72616469616c4772616469656e742069643d2272616469616c2d6772616469656e742d33222063783d223138302e3634222063793d2236302e38362220723d2239382e313522206772616469656e74556e6974733d227573657253706163654f6e557365223e3c73746f70206f66667365743d2230222073746f702d636f6c6f723d2223666666396139222f3e3c73746f70206f66667365743d22302e3437222073746f702d636f6c6f723d2223666664383939222f3e3c73746f70206f66667365743d22302e3731222073746f702d636f6c6f723d2223663062363632222f3e3c73746f70206f66667365743d22302e39222073746f702d636f6c6f723d2223653639643363222f3e3c73746f70206f66667365743d2231222073746f702d636f6c6f723d2223653239343264222f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c7265637420636c6173733d22636c732d31222077696474683d2234303022206865696768743d22343030222f3e3c706f6c79676f6e20636c6173733d22636c732d322220706f696e74733d223231382e3839203333352e32203136382e3838203330392e3633203137392e3132203333352e35203231322e3039203335322e3337203231382e3839203333352e32222f3e3c706f6c79676f6e20636c6173733d22636c732d332220706f696e74733d223136352e3838203330322e3035203232302e3837203333302e3138203232372e3637203331332e3031203135352e3634203237362e3137203136352e3838203330322e3035222f3e3c706f6c79676f6e20636c6173733d22636c732d342220706f696e74733d223232392e3636203330372e3939203235332e3636203234372e3334203134342e3233203234372e3334203135322e3634203236382e3539203232392e3636203330372e3939222f3e3c7061746820636c6173733d22636c732d352220643d224d3138322e31322c3334332e30386c31302e36322c32362e383461362e36372c362e36372c302c302c302c31322e34312c306c342e39352d31322e35325a222f3e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3136342e32336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3136342e32335a222f3e3c2f673e3c7061746820636c6173733d22636c732d31302220643d224d3236352e33392c39332e33336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34392c31362e34392c302c302c302d382e37372c392e34372c31362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c39332e33335a222f3e3c7061746820636c6173733d22636c732d382220643d224d3236352e33392c3232346131362e34392c31362e34392c302c302c302d382e37352d392e34372c31322e33392c31322e33392c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e364131362e34392c31362e34392c302c302c302c3133322e352c3232346131362e36392c31362e36392c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131362e33372c31362e33372c302c302c302c312e39322d312e33364131362e382c31362e382c302c302c302c3236352e33392c3232345a222f3e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3136342e32336131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3136342e32335a222f3e3c2f673e3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c39382e39316131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36394135302e392c35302e392c302c302c302c3138392e37382c31333263362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c39382e39315a222f3e3c2f673e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c6720636c6173733d22636c732d36223e3c7061746820636c6173733d22636c732d372220643d224d3236352e33392c3232392e35356131362e352c31362e352c302c302c302d382e37352d392e34362c31322e342c31322e342c302c302c312d372e30392d31302e35372c35302e372c35302e372c302c302c302d3130312e31392c302c31322e34352c31322e34352c302c302c312d372e30392c31302e362c31362e34362c31362e34362c302c302c302d382e37372c392e34372c31362e372c31362e372c302c302c302c32312e37332c32312e32352c31332e332c31332e332c302c302c312c31332e31382c312e36392c35302e392c35302e392c302c302c302c32322e33372c31302e313763362e33312c312e31372c31312e31342c352e38352c31342c31312e366132332e332c32332e332c302c302c302c34342e31332d392e3332632e332d362e36322c342e38342d31322c31302e34392d31352e34376131392e31332c31392e31332c302c302c302c312e39322d312e33364131362e38312c31362e38312c302c302c302c3236352e33392c3232392e35355a222f3e3c2f673ea26469706673582212208db7a2a05d346a10f28cec3f15263d58ad0c4f470da138c064e023a3baa71dc564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2108,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "licks",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2112,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "lickBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2116,
        "contract": "contracts/GelatoShop.sol:GelatoShop",
        "label": "isMinter",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}